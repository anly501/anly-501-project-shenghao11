model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population$Label<-as.factor(population$Label)
population
# outlier
population<-population[population$Label!=-6,]
population
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
train
test
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
from sklearn.datasets import make_blobs
X
plt.scatter(train$Deaths_norm, train$GDP_nrom,train$Births_norm,train$Year_norm, c=train$Label, s=50, cmap='RdBu');
library(car)
plt.scatter(train$Deaths_norm, train$GDP_nrom,train$Births_norm,train$Year_norm, c=train$Label, s=50, cmap='RdBu');
install.packages('car')
install.packages("car")
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
library(car)
plt.scatter(train$Deaths_norm, train$GDP_nrom,train$Births_norm,train$Year_norm, c=train$Label, s=50, cmap='RdBu');
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
from matplotlib import pyplot as plt
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
from matplotlib import pyplot as plt
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
scatterplot(Label ~ -Entity | cyl, data=train)
scatterplot(Label ~ -Entity, data=train)
scatterplot(Label ~ -Entity, data=test)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
train
#(train[,1:3])
train
scatterplot3d(train[,2:5])
train
scatterplot3d(train[,2:4])
library("scatterplot3d")
install.packages("scatterplot3d") # Install
library("scatterplot3d")
train
scatterplot3d(train[,2:4])
library("scatterplot3d")
train
scatterplot3d(train[,2:5])
library("scatterplot3d")
train
scatterplot3d(train[,2:6])
library("scatterplot3d")
train
scatterplot3d(train[,2:4])
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
hist(model)
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
model
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
head(population)
population[population!=-1,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population[population!=-1,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population[population!=-6,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
#population[population!=-6,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
#population[population!=-6,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
#population[population!=-6,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
#population[population!=-6,]
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population[population!=-6]
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population[population$Label!=-6,]
population
population$Label<-as.factor(population$Label)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population[population$Label!=-6,]
population
#population$Label<-as.factor(population$Label)
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
model
#Naive Bayes Classification
model <- naive_bayes(Label ~., data = train)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~., data = train)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~., data = train)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
plot(model)
jpeg(file="1.jpeg")
knitr::opts_chunk$set(echo = TRUE)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
library(caret)
population <- read.csv('../../data/01-modified-data/cleaned-population-py.csv')
population <- population[,!(names(population) %in% 'X')]
# normalize death, gdp and birth
population$Deaths_norm = (population$Deaths - mean(population$Deaths))/sd(population$Deaths)
population$GDP_nrom = (population$GDP - mean(population$GDP))/sd(population$GDP)
population$Births_norm = (population$Births - mean(population$Births))/sd(population$Births)
population$Year_norm = (population$Year - mean(population$Year))/sd(population$Year)
population$Label = round(population$Natural_growth_rate)
population<-population[population$Label!=-6,]
population$Label<-as.factor(population$Label)
trainIndex <- createDataPartition(population$Label,p=0.8,list=FALSE)
train <- population[trainIndex,] #training data
train <- train[, -c(2:6)]
test <- population[-trainIndex,] #testing data
test <- test[, -c(2:6)]
#Naive Bayes Classification
model <- naive_bayes(Label ~ -Entity, data = train)
png(filename="../../501-project-website/images/naive_bayes_r.png")
plot(model)
dev.off()
y_pred <- predict(model, newdata = test)
(tab2 <- table(y_pred, test$Label))
1 - sum(diag(tab2)) / sum(tab2)
